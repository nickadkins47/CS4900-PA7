_current_progress_remaining:
    value: 1
_custom_logger:
    value: "False"
_episode_num:
    value: 0
_last_episode_starts:
    value: '[ True]'
_last_obs:
    value: '[[-0.20407948 -0.9789543  -0.42531368]]'
_last_original_obs:
    value: None
_logger:
    value: <stable_baselines3.common.logger.Logger object at 0x7f0ca09e5570>
_n_updates:
    value: 0
_num_timesteps_at_start:
    value: 0
_stats_window_size:
    value: 100
_total_timesteps:
    value: 100000
_vec_normalize_env:
    value: None
_wandb:
    value:
        cli_version: 0.19.9
        m: []
        python_version: 3.10.12
        t:
            "1":
                - 1
                - 55
            "2":
                - 1
                - 55
            "3":
                - 1
                - 2
                - 3
                - 16
                - 22
                - 23
                - 35
                - 55
            "4": 3.10.12
            "5": 0.19.9
            "8":
                - 5
            "12": 0.19.9
            "13": linux-x86_64
action_noise:
    value: None
action_space:
    value: Box(-2.0, 2.0, (1,), float32)
algo:
    value: A2C
algorithm:
    value: A2C
device:
    value: cpu
ent_coef:
    value: 0
env:
    value: <stable_baselines3.common.vec_env.vec_video_recorder.VecVideoRecorder object at 0x7f0cd1725ff0>
env_name:
    value: Pendulum-v1
ep_info_buffer:
    value: deque([], maxlen=100)
ep_success_buffer:
    value: deque([], maxlen=100)
gae_lambda:
    value: 1
gamma:
    value: 0.99
learning_rate:
    value: 0.0007
lr_schedule:
    value: <function get_schedule_fn.<locals>.<lambda> at 0x7f0cd138c9d0>
max_grad_norm:
    value: 0.5
n_envs:
    value: 1
n_steps:
    value: 5
normalize_advantage:
    value: "False"
num_timesteps:
    value: 0
observation_space:
    value: Box([-1. -1. -8.], [1. 1. 8.], (3,), float32)
policy:
    value: |-
        ActorCriticPolicy(
          (features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (pi_features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (vf_features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (mlp_extractor): MlpExtractor(
            (policy_net): Sequential(
              (0): Linear(in_features=3, out_features=64, bias=True)
              (1): Tanh()
              (2): Linear(in_features=64, out_features=64, bias=True)
              (3): Tanh()
            )
            (value_net): Sequential(
              (0): Linear(in_features=3, out_features=64, bias=True)
              (1): Tanh()
              (2): Linear(in_features=64, out_features=64, bias=True)
              (3): Tanh()
            )
          )
          (action_net): Linear(in_features=64, out_features=1, bias=True)
          (value_net): Linear(in_features=64, out_features=1, bias=True)
        )
policy_class:
    value: <class 'stable_baselines3.common.policies.ActorCriticPolicy'>
policy_kwargs:
    value: '{''optimizer_class'': <class ''torch.optim.rmsprop.RMSprop''>, ''optimizer_kwargs'': {''alpha'': 0.99, ''eps'': 1e-05, ''weight_decay'': 0}}'
policy_type:
    value: MlpPolicy
rollout_buffer:
    value: <stable_baselines3.common.buffers.RolloutBuffer object at 0x7f0cd1381bd0>
rollout_buffer_class:
    value: <class 'stable_baselines3.common.buffers.RolloutBuffer'>
rollout_buffer_kwargs:
    value: '{}'
sde_sample_freq:
    value: -1
seed:
    value: None
start_time:
    value: 1744053838862562211
tensorboard_log:
    value: models/nef8d866/log
total_timesteps:
    value: 100000
use_sde:
    value: "False"
verbose:
    value: 1
vf_coef:
    value: 0.5
